package hist

import (
	"abs-specific/util"
	"math/rand"

	"reflect"
	"testing"
)

func TestCreateHistogram(t *testing.T) {
	type args struct {
		data     []float64
		num_bins int
	}
	tests := []struct {
		name string
		args args
		want Histogram
	}{
		{"Altitudes", args{util.GetDataFromCSV("../test_data/alts.csv"), 20},
			Histogram{
				cdf:           []float64{0.02650602409638554, 0.02891566265060241, 0.04578313253012048, 0.05783132530120482, 0.07951807228915662, 0.12289156626506025, 0.1855421686746988, 0.25783132530120484, 0.3289156626506024, 0.3710843373493976, 0.4867469879518072, 0.5602409638554217, 0.6289156626506024, 0.7, 0.7506024096385542, 0.8120481927710843, 0.8650602409638555, 0.9108433734939759, 0.9602409638554217, 1},
				bin_midpoints: []float64{179.79002624671915, 375.3280839895013, 570.8661417322835, 766.4041994750655, 961.9422572178478, 1157.48031496063, 1353.0183727034118, 1548.556430446194, 1744.0944881889764, 1939.6325459317586, 2135.1706036745404, 2330.7086614173227, 2526.246719160105, 2721.7847769028867, 2917.322834645669, 3112.8608923884512, 3308.3989501312335, 3503.9370078740158, 3699.475065616798, 3895.01312335958},
			},
		},
		{"Tracks", args{util.GetDataFromCSV("../test_data/tracks.csv"), 20},
			Histogram{
				cdf:           []float64{0.04342581423401689, 0.06272617611580217, 0.09167671893848009, 0.11459589867310012, 0.1700844390832328, 0.2605548854041013, 0.4294330518697226, 0.4632086851628468, 0.4897466827503016, 0.5138721351025332, 0.5464414957780458, 0.6151990349819059, 0.6634499396863691, 0.7285886610373945, 0.773220747889023, 0.8431845597104946, 0.8962605548854041, 0.9360675512665863, 0.9638118214716526, 1},
				bin_midpoints: []float64{8.975, 26.924999999999997, 44.875, 62.824999999999996, 80.775, 98.725, 116.67499999999998, 134.625, 152.575, 170.52499999999998, 188.475, 206.42499999999998, 224.375, 242.325, 260.275, 278.225, 296.17499999999995, 314.125, 332.075, 350.025},
			},
		},
		{"Velocities", args{util.GetDataFromCSV("../test_data/vels.csv"), 20},
			Histogram{
				cdf:           []float64{0.18170878459687123, 0.19494584837545126, 0.22021660649819494, 0.25872442839951865, 0.3176895306859206, 0.4127557160048135, 0.5270758122743683, 0.6137184115523465, 0.7256317689530686, 0.8483754512635379, 0.9350180505415162, 0.9711191335740073, 0.9783393501805054, 0.9795427196149218, 0.9927797833935018, 0.9951865222623345, 0.9963898916967509, 0.9963898916967509, 0.9975932611311673, 1},
				bin_midpoints: []float64{6.290625, 18.871875000000003, 31.453125000000004, 44.034375000000004, 56.615625, 69.196875, 81.77812500000002, 94.359375, 106.94062500000001, 119.521875, 132.103125, 144.68437500000002, 157.265625, 169.846875, 182.42812500000002, 195.009375, 207.59062500000002, 220.171875, 232.753125, 245.33437500000002},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := CreateHistogram(tt.args.data, tt.args.num_bins); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CreateHistogram() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestHistogram_Sample(t *testing.T) {
	alt_histogram := CreateHistogram(util.GetDataFromCSV("../test_data/alts.csv"), 20)
	rand.Seed(324)
	type args struct {
		num int
	}
	tests := []struct {
		name string
		hist *Histogram
		args args
		want []float64
	}{
		{"Altitudes", &alt_histogram, args{1}, []float64{2721.7847769028867}},
		{"Altitudes Multiple", &alt_histogram, args{20}, []float64{2135.1706036745404, 1353.0183727034118, 3895.01312335958, 2721.7847769028867, 1157.48031496063, 1744.0944881889764, 3112.8608923884512, 1548.556430446194, 3895.01312335958, 3503.9370078740158, 2917.322834645669, 1353.0183727034118, 1548.556430446194, 1939.6325459317586, 1548.556430446194, 3308.3989501312335, 2526.246719160105, 1939.6325459317586, 3699.475065616798, 3895.01312335958}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.hist.Sample(tt.args.num); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Histogram.Sample() = %v, want %v", got, tt.want)
			}
		})
	}
}
